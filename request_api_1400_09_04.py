# -*- coding: utf-8 -*-
"""Request_API_1400_09_04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uYyl0u4GUO80r4A3iYrywB5gyIFxWNLY
"""

#                                Start Of API setting
#################################  Settings are two part Alternatings  and Fixed #################################

#################################  1_   Alternatings for client 
SourceInputImageDir='/content/drive/MyDrive/Test.jpg'   #Each time client user can Upload an image from WEB API to this root.  
M_WindowShape=500                                       # A tab or scrooling knob that client can set it
C_WindowShape=300                                       # A tab or scrooling knob that client can set it
# After three abowe opreation cleint must can RUN all the script

################################   2_  Fixed setting that somtimes admin could change them on server
M_NetDir='/...../ObjectDetection.h5'
C_NetDir='/...../ObjectDetection.h5'
TemplatePachDir='/...../CNNFeedPic.bmp'
ResultDir_M='/.........../M_Output.bmp'
ResultDir_C='/.........../C_Output.bmp'


#                            End of API settings
###########################################################################################################



# RUN

import numpy as np
import cv2
from PIL import Image 
import matplotlib.pyplot as plt 
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image_dataset_from_directory
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
imtest = cv2.imread(SourceInputImageDir, 1) 
model = keras.models.load_model(M_NetDir)
d=imtest[:,:,1]
[a,b]=d.shape
d=imtest
ZeroPachesNumber=0
NonZeroPachesNumber=0
k=0
WindowShape=M_WindowShape
M=np.int(a/WindowShape)               
N=np.int(b/WindowShape)
PatchPosition_M=np.zeros((M, N)) 

for i in range(M):
 for j in range(N):
   CNNFeedPic=d[i*WindowShape:i*WindowShape+WindowShape,j*WindowShape:j*WindowShape+WindowShape]
   p=CNNFeedPic.sum()
   if p ==0:
     ZeroPachesNumber=ZeroPachesNumber+1
   else:
    im = Image.fromarray(CNNFeedPic)
    im.save(TemplatePachDir)
    [img_height,img_width]=[160,160]
    img = keras.preprocessing.image.load_img(TemplatePachDir, target_size=(img_height, img_width))
    img_array = keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0) 
    predictions = model.predict(img_array)
    Tempimage = plt.imread(TemplatePachDir)
    if predictions[0].sum() > 0:
     PatchPosition_M[i,j]=1
     k=k+1
     cv2.rectangle(imtest, (j*WindowShape, i*WindowShape), (j*WindowShape+WindowShape, i*WindowShape+WindowShape), (255, 255, 0), thickness=10, lineType=cv2.LINE_8)
     cv2.putText(imtest, "M", (j*WindowShape, i*WindowShape), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 255), 5)
im = Image.fromarray(imtest)
im.save(ResultDir_M)
imtest = cv2.imread(SourceInputImageDir, 1) 
CalcIm=imtest
model = keras.models.load_model(C_NetDir)
WindowShape=C_WindowShape
M=np.int(a/WindowShape)               
N=np.int(b/WindowShape)
PatchPosition_C=np.zeros((M, N))
i=0
j=0
for i in range(M):
 for j in range(N):
   CNNFeedPic=CalcIm[i*WindowShape:i*WindowShape+WindowShape,j*WindowShape:j*WindowShape+WindowShape]
   p=CNNFeedPic.sum()
   if p ==0:
     ZeroPachesNumber=ZeroPachesNumber+1
   else:
    im = Image.fromarray(CNNFeedPic)
    im.save(TemplatePachDir)
    [img_height,img_width]=[160,160]
    img = keras.preprocessing.image.load_img(TemplatePachDir, target_size=(img_height, img_width))
    img_array = keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0) # Create a batch
    predictions = model.predict(img_array)
    Tempimage = plt.imread(TemplatePachDir)
    if predictions[0].sum() > 0:
     PatchPosition_C[i,j]=1
     k=k+1
     cv2.rectangle(CalcIm, (j*WindowShape, i*WindowShape), (j*WindowShape+WindowShape, i*WindowShape+WindowShape), (255, 255, 0), thickness=10, lineType=cv2.LINE_8)
     cv2.putText(CalcIm, "C", (j*WindowShape, i*WindowShape), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 255), 5)
im = Image.fromarray(CalcIm)
im.save(ResultDir_C)

Ma = cv2.imread(ResultDir_M, 1) 
Ca = cv2.imread(ResultDir_C, 1)
# create figure
fig = plt.figure(figsize=(20, 14))
# Adds a subplot at the 1st position
fig.add_subplot(1, 2, 1)
plt.imshow(Ma)
plt.axis('off')
plt.title("Mass")
# Adds a subplot at the 2nd position
fig.add_subplot(1, 2, 2)
  
# showing image
plt.imshow(Ca)
plt.axis('off')
plt.title("Calcification")

#########    کار با اپن سی وی
##  https://icc-aria.ir/courses/%D9%BE%D8%B1%D8%AF%D8%A7%D8%B2%D8%B4-%D8%AA%D8%B5%D9%88%DB%8C%D8%B1-%D8%A8%D8%A7-%D9%BE%D8%A7%DB%8C%D8%AA%D9%88%D9%86/episode/%DA%A9%D8%B4%DB%8C%D8%AF%D9%86-%D8%A7%D8%B4%DA%A9%D8%A7%D9%84-%D9%85%D8%AE%D8%AA%D9%84%D9%81


https://www.geeksforgeeks.org/how-to-display-multiple-images-in-one-figure-correctly-in-matplotlib/